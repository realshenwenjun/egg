<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dskj.announcement.mapper.AnnouncementMapper">
	<cache type="org.mybatis.caches.ehcache.LoggingEhcache">
	</cache>
	<resultMap type="com.dskj.announcement.entity.Announcement"
		id="announcement">
		<id property="id" column="id" />
		<result property="institutionId" column="institution_id" />
		<result property="userId" column="user_id" />
		<result property="typeId" column="type_id" />
		<result property="belong" column="belong" />
		<result property="title" column="title" />
		<result property="content" column="content" />
		<result property="annoImage" column="anno_image" />
		<result property="createTime" column="create_time" />
	</resultMap>
	<resultMap type="com.dskj.announcement.entity.AnnouncementVO"
		id="announcementVO">
		<id property="id" column="id" />
		<result property="institutionId" column="institution_id" />
		<result property="institutionName" column="institution_name" />
		<result property="userId" column="user_id" />
		<result property="typeId" column="type_id" />
		<result property="belong" column="belong" />
		<result property="title" column="title" />
		<result property="content" column="content" />
		<result property="annoImage" column="anno_image" />
		<result property="createTime" column="create_time" />
		<result property="isNew" column="is_new" />
		<result property="readId" column="read_id" />
	</resultMap>
	<select id="get" parameterType="java.lang.Integer" resultMap="announcement">
		select * from announcement where id = #{id}
	</select>
	<insert id="add" parameterType="com.dskj.announcement.entity.Announcement"
		useGeneratedKeys="true" keyProperty="id">
		insert into announcement
		(institution_id,user_id,type_id,belong,title,anno_image,content,create_time)
		values
		(#{institutionId},#{userId},#{typeId},#{belong},#{title},#{annoImage},#{content},#{createTime})
	</insert>
	<update id="update" parameterType="com.dskj.announcement.entity.Announcement">
		update announcement a
		<set>
			<if test="typeId != null">a.type_id = #{typeId},</if>
			<if test="title != null">a.title = #{title},</if>
			<if test="content != null">a.content = #{content},</if>
			<if test="annoImage != null">a.anno_image = #{annoImage}</if>
		</set>
		where id =
		#{id}
	</update>
	<delete id="delete" parameterType="java.util.ArrayList">
		delete from announcement where
		id in
		<foreach collection="list" item="ids" index="index" open="("
			separator="," close=")">#{ids}
		</foreach>
	</delete>
	<select id="list" resultMap="announcementVO">
		(SELECT
		a.*,i.name AS
		institution_name,read2.read_id AS read_id,(CASE WHEN
		TIMESTAMPDIFF(DAY,a.create_time,NOW()) &lt;= 3 THEN 1 ELSE 0 END
		)
		AS
		is_new
		FROM user u JOIN institution_user iu ON iu.user_id = u.id JOIN
		announcement a ON
		iu.institution_id =
		a.institution_id JOIN institution
		i ON
		a.institution_id = i.id
		LEFT JOIN (SELECT ar.id AS
		read_id,ar.announcement_id AS announcement_id
		FROM announcement_read ar
		WHERE ar.user_id = #{userId}) read2 ON a.id
		= read2.announcement_id
		WHERE iu.user_id = #{userId} AND (iu.create_time
		&lt;= a.create_time OR a.type_id = 1))
		UNION
		(SELECT a.*,(SELECT NULL)
		AS
		institution_name,read2.read_id AS
		read_id,(CASE WHEN
		TIMESTAMPDIFF(DAY,a.create_time,NOW()) &lt;= 3
		THEN 1 ELSE 0 END )
		AS
		is_new
		FROM announcement a
		LEFT JOIN (SELECT ar.id
		AS
		read_id,ar.announcement_id AS announcement_id
		FROM announcement_read
		ar
		WHERE ar.user_id = #{userId}) read2 ON a.id
		= read2.announcement_id
		WHERE a.institution_id IS NULL AND (a.create_time &gt;= (SELECT
		u.create_time FROM user u WHERE u.id = #{userId}) OR a.type_id = 1))
		ORDER BY create_time DESC LIMIT
		#{page.pageNo},#{page.pageSize}
	</select>
	<select id="listByTitle" resultMap="announcementVO">
		(SELECT
		a.*,i.name AS
		institution_name,read2.read_id AS read_id,(CASE WHEN
		TIMESTAMPDIFF(DAY,a.create_time,NOW()) &lt;= 3 THEN 1 ELSE 0 END
		)
		AS
		is_new
		FROM user u JOIN institution_user iu ON iu.user_id = u.id JOIN
		announcement a ON
		iu.institution_id =
		a.institution_id JOIN institution
		i ON
		a.institution_id = i.id
		LEFT JOIN (SELECT ar.id AS
		read_id,ar.announcement_id AS announcement_id
		FROM announcement_read ar
		WHERE ar.user_id = #{userId}) read2 ON a.id
		= read2.announcement_id
		WHERE iu.user_id = #{userId} AND (iu.create_time
		&lt;= a.create_time OR a.type_id = 1) AND a.title LIKE '%${title}%')
		UNION
		(SELECT
		a.*,(SELECT NULL) AS
		institution_name,read2.read_id AS
		read_id,(CASE
		WHEN
		TIMESTAMPDIFF(DAY,a.create_time,NOW()) &lt;= 3
		THEN 1
		ELSE 0 END )
		AS
		is_new
		FROM announcement a
		LEFT JOIN (SELECT ar.id
		AS
		read_id,ar.announcement_id AS announcement_id
		FROM announcement_read
		ar
		WHERE ar.user_id = #{userId}) read2 ON a.id
		= read2.announcement_id
		WHERE a.institution_id IS NULL AND (a.type_id = 1 OR a.create_time
		&gt;= (SELECT u.create_time FROM user u WHERE u.id = #{userId})) AND
		a.title LIKE '%${title}%')
		ORDER BY create_time DESC LIMIT
		#{page.pageNo},#{page.pageSize}
	</select>
	<select id="clear" resultType="int" flushCache="true">
		SELECT 1
	</select>
	<select id="getCurrentInstitutionClassSignCount" parameterType="java.lang.String"
		resultType="int" useCache="false">
		SELECT COUNT(ccs.id) FROM
		course_classes_sign ccs JOIN
		course_classes cc ON ccs.classes_id =
		cc.id JOIN institution_user iu
		ON cc.institution_id = iu.institution_id
		WHERE iu.user_id = #{0} AND iu.current = 1 AND ccs.user_id =
		#{0}
	</select>
	<select id="sysList" resultMap="announcementVO">
		(SELECT
		a.*,i.name AS
		institution_name,read2.read_id AS read_id,(CASE WHEN
		TIMESTAMPDIFF(DAY,a.create_time,NOW()) &lt;= 3 THEN 1 ELSE 0 END
		)
		AS
		is_new
		FROM user u JOIN institution_user iu ON iu.user_id = u.id JOIN
		announcement a ON
		iu.institution_id =
		a.institution_id JOIN institution
		i ON
		a.institution_id = i.id
		LEFT JOIN (SELECT ar.id AS
		read_id,ar.announcement_id AS announcement_id
		FROM announcement_read ar
		WHERE ar.user_id = #{userId}) read2 ON a.id
		= read2.announcement_id
		WHERE iu.user_id = #{userId} AND a.type_id = 1)
		UNION
		(SELECT a.*,(SELECT NULL) AS
		institution_name,read2.read_id AS
		read_id,(CASE WHEN
		TIMESTAMPDIFF(DAY,a.create_time,NOW()) &lt;= 3
		THEN 1
		ELSE 0 END )
		AS
		is_new
		FROM announcement a
		LEFT JOIN (SELECT ar.id
		AS
		read_id,ar.announcement_id AS announcement_id
		FROM announcement_read
		ar
		WHERE ar.user_id = #{userId}) read2 ON a.id
		= read2.announcement_id
		WHERE a.institution_id IS NULL AND (a.create_time &gt;= (SELECT
		u.create_time FROM user u WHERE u.id = #{userId}) OR a.type_id = 1))
		ORDER BY create_time DESC LIMIT
		#{page.pageNo},#{page.pageSize}
	</select>
	<select id="getUserType" parameterType="java.lang.String"
		resultType="java.lang.Integer">
		SELECT u.type FROM user u WHERE u.id = #{0}
	</select>
	<select id="getAnnouncementCount" resultType="int">
		SELECT COUNT(*)
		FROM announcement a
		WHERE a.institution_id IS NULL
	</select>
	<select id="getPlatformsAnnouncementList" parameterType="com.dskj.util.Page" resultMap="announcement">
		SELECT *
		FROM announcement a
		WHERE a.institution_id IS NULL ORDER BY a.create_time DESC LIMIT #{pageNo},#{pageSize}
	</select>
	<select id="getAnnouncementAllCount" resultType="int">
		SELECT (SELECT COUNT(*)
		FROM institution_user iu JOIN
		announcement a ON
		iu.institution_id =
		a.institution_id
		WHERE iu.user_id = #{userId} AND (iu.create_time
		&lt;= a.create_time OR a.type_id = 1))
		+
		(SELECT COUNT(*)
		FROM announcement a
		WHERE a.institution_id IS NULL AND (a.create_time &gt;= (SELECT
		u.create_time FROM user u WHERE u.id = #{userId}) OR a.type_id = 1))
	</select>
	<select id="getAnnouncementReadedCount" resultType="int">
		SELECT (SELECT COUNT(*)
		FROM institution_user iu JOIN
		announcement a ON
		iu.institution_id =
		a.institution_id
		JOIN announcement_read ar ON ar.announcement_id = a.id
		WHERE iu.user_id = #{userId} AND ar.user_id = #{userId} AND (iu.create_time
		&lt;= a.create_time OR a.type_id = 1))
		+
		(SELECT COUNT(*)
		FROM announcement a JOIN announcement_read ar ON ar.announcement_id = a.id
		WHERE a.institution_id IS NULL AND ar.user_id = #{userId} AND (a.create_time &gt;= (SELECT
		u.create_time FROM user u WHERE u.id = #{userId}) OR a.type_id = 1))
	</select>
	<delete id="deleteByInstitutionId">
		DELETE FROM announcement WHERE institution_id = #{0}
	</delete>
</mapper>