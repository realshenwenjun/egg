<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dskj.comment.mapper.CommentMapper">
	<cache type="org.mybatis.caches.ehcache.LoggingEhcache">
	</cache>
	<resultMap id="commentChildVO" type="com.dskj.comment.entity.CommentChildVO">
		<result property="id" column="id"></result>
		<result property="sendUserId" column="send_user_id"></result>
		<result property="senderName" column="sender_name"></result>
		<result property="receiveName" column="receive_name"></result>
		<result property="context" column="context"></result>
		<result property="createTime" column="create_time"></result>
	</resultMap>
	<resultMap type="com.dskj.comment.entity.Comment" id="comment">
		<id property="id" column="id" />
		<result property="userId" column="user_id" />
		<result property="context" column="context" />
		<result property="isPublic" column="public" />
		<result property="isOriginal" column="original" />
		<result property="parentId" column="parent_id" />
		<result property="createTime" column="create_time" />
	</resultMap>
	<resultMap type="com.dskj.comment.entity.CommentVO" id="commentVO">
		<id property="id" column="id" />
		<result property="userId" column="user_id" />
		<result property="userLevelId" column="user_level_id" />
		<result property="userName" column="user_name" />
		<result property="userPhoto" column="user_photo" />
		<result property="sex" column="sex" />
		<result property="context" column="context" />
		<result property="isPublic" column="public" />
		<result property="isOriginal" column="original" />
		<result property="parentId" column="parent_id" />
		<result property="loveCount" column="love_count" />
		<result property="commentCount" column="comment_count" />
		<result property="myloveId" column="my_love_id" />
		<result property="createTime" column="create_time" />
		<collection property="voidePaths" ofType="java.util.ArrayList"
			select="getCommentVideoPaths" column="{commentId = id}">
		</collection>
		<collection property="imagePaths" ofType="java.util.ArrayList"
			select="getCommentImagePaths" column="{commentId = id}">
		</collection>
		<collection property="commentChilds"
			ofType="com.dskj.comment.entity.CommentChildVO" javaType="java.util.ArrayList"
			select="getCommentChilds" column="{commentId = id}">
		</collection>
	</resultMap>
	<resultMap type="com.dskj.comment.entity.CommentMessage" id="commentMessage">
		<id property="id" column="message_id" />
		<result property="commentId" column="comment_id" />
		<result property="userId" column="user_id" />
		<result property="userLevelId" column="user_level_id" />
		<result property="userName" column="user_name" />
		<result property="userPhoto" column="user_photo" />
		<result property="sex" column="sex" />
		<result property="context" column="context" />
		<result property="isPublic" column="public" />
		<result property="isOriginal" column="original" />
		<result property="parentId" column="parent_id" />
		<result property="loveCount" column="love_count" />
		<result property="commentCount" column="comment_count" />
		<result property="myloveId" column="my_love_id" />
		<result property="createTime" column="create_time" />
		<result property="readId" column="read_id" />
		<collection property="voidePaths" ofType="java.util.ArrayList"
			select="getCommentVideoPaths" column="{commentId = id}">
		</collection>
		<collection property="imagePaths" ofType="java.util.ArrayList"
			select="getCommentImagePaths" column="{commentId = id}">
		</collection>
		<collection property="commentChilds"
			ofType="com.dskj.comment.entity.CommentChildVO" javaType="java.util.ArrayList"
			select="getCommentChilds" column="{commentId = id}">
		</collection>
	</resultMap>
	<select id="clear" resultType="int" flushCache="true">
		SELECT 1
	</select>
	<insert id="add" parameterType="com.dskj.comment.entity.Comment"
		useGeneratedKeys="true" keyProperty="id">
		INSERT INTO `comment`
		(user_id,context,public,original,parent_id,create_time) VALUES
		(#{userId},#{context},#{isPublic},#{isOriginal},#{parentId},#{createTime})
	</insert>
	<select id="getCommentsByIds" parameterType="java.util.HashMap"
		resultMap="commentVO">
		SELECT c.*,u.name AS user_name,u.level_id AS user_level_id,u.photo AS
		user_photo,u.sex AS sex,(SELECT COUNT(*) FROM
		comment_love cl WHERE
		cl.comment_id =
		c.id) AS love_count,(SELECT
		COUNT(*) FROM `comment` cc
		WHERE
		cc.parent_id = c.id) AS comment_count,cl2.id AS my_love_id
		FROM
		`comment` c JOIN `user` u ON c.`user_id` = u.`id` LEFT JOIN (SELECT *
		FROM comment_love cl WHERE
		cl.`user_id` = #{userId}) cl2 ON c.`id` =
		cl2.comment_id WHERE c.id IN
		<foreach collection="list" item="ids" index="index" open="("
			separator="," close=")">#{ids}
		</foreach>
		ORDER BY c.id DESC
	</select>
	<select id="getCommentVideoPaths" parameterType="java.util.HashMap"
		resultType="java.lang.String">
		SELECT
		cv.voide_path FROM comment_voide cv WHERE
		cv.comment_id = #{commentId}
	</select>
	<select id="getCommentImagePaths" parameterType="java.util.HashMap"
		resultType="java.lang.String">
		SELECT
		ci.img_path FROM comment_image ci WHERE
		ci.comment_id
		= #{commentId}
	</select>
	<select id="getChildrenIds" resultType="java.lang.Integer">
		SELECT c.id FROM
		`comment` c WHERE c.parent_id = #{id} LIMIT
		#{page.pageNo},#{page.pageSize}
	</select>
	<select id="getCommentChilds" parameterType="java.util.HashMap"
		resultMap="commentChildVO">
		SELECT c.id AS id,u.id AS send_user_id,u.name AS
		sender_name,(SELECT ui.name FROM `comment`
		ci JOIN `user` ui ON
		ci.user_id = ui.id WHERE ci.id = #{commentId}) AS
		receive_name,c.context AS context,c.create_time AS create_time FROM
		`comment` c JOIN `user`
		u ON c.user_id = u.id WHERE c.parent_id =
		#{commentId}
		UNION
		SELECT c.id AS id,u.id AS send_user_id,u.name AS
		sender_name,(SELECT ui.name FROM `comment` ci
		JOIN `user` ui ON
		ci.user_id = ui.id WHERE ci.id = c.parent_id) AS
		receive_name,c.context AS context,c.create_time AS create_time FROM
		`comment` c JOIN `user`
		u ON c.user_id = u.id WHERE c.parent_id IN
		(SELECT c2.id FROM
		`comment` c2 WHERE c2.parent_id = #{commentId})
		ORDER BY create_time DESC LIMIT 20
	</select>
	<select id="getChildComments" resultMap="commentChildVO">
		SELECT c.id AS id,u.id
		AS send_user_id,u.name AS sender_name,(SELECT ui.name FROM `comment`
		ci JOIN `user` ui ON ci.user_id = ui.id WHERE ci.id = #{commentId}) AS
		receive_name,c.context AS context,c.create_time AS create_time FROM
		`comment` c JOIN `user`
		u ON c.user_id = u.id WHERE c.parent_id =
		#{commentId}
		UNION
		SELECT c.id AS id,u.id AS send_user_id,u.name AS
		sender_name,(SELECT ui.name FROM `comment` ci
		JOIN `user` ui ON
		ci.user_id = ui.id WHERE ci.id = c.parent_id) AS
		receive_name,c.context AS context,c.create_time AS create_time FROM
		`comment` c JOIN `user`
		u ON c.user_id = u.id WHERE c.parent_id IN
		(SELECT c2.id FROM
		`comment` c2 WHERE c2.parent_id = #{commentId})
		ORDER BY create_time DESC LIMIT #{page.pageNo},#{pageSize}
	</select>
	<delete id="delete" parameterType="int">
		DELETE FROM `comment` WHERE id
		= #{0}
	</delete>
	<select id="getById" parameterType="int" resultMap="comment">
		SELECT * FROM
		comment c WHERE c.id = #{0}
	</select>
	<select id="getCommentMessageList" resultMap="commentMessage">
		SELECT cm.id AS message_id,c.id AS comment_id,
		c.*,cm.is_read AS read_id,u.name AS user_name,u.level_id AS
		user_level_id,u.photo AS
		user_photo,u.sex AS sex,(SELECT COUNT(*) FROM
		comment_love cl WHERE
		cl.comment_id =
		c.id) AS love_count,(SELECT
		COUNT(*) FROM `comment` cc
		WHERE
		cc.parent_id = c.id) AS comment_count,cl2.id AS my_love_id
		FROM comment_message cm JOIN `comment` c ON cm.comment_id = c.id JOIN
		`user` u ON c.user_id = u.id
		LEFT JOIN (SELECT * FROM comment_love cl WHERE cl.`user_id` = #{userId}) cl2 ON
		c.`id` =
		cl2.comment_id
		WHERE cm.parent_user_id = #{userId} ORDER BY cm.create_time DESC LIMIT #{page.pageNo},#{page.pageSize}
	</select>
	<update id="updateCommentMessageRead" parameterType="int">
		UPDATE comment_message SET is_read = 1 WHERE id = #{0}
	</update>
	<select id="getCommentMessageNewCount" resultType="int">
		SELECT COUNT(*)
		FROM comment_message cm
		WHERE cm.parent_user_id = #{userId} AND cm.is_read = 0
	</select>
</mapper>